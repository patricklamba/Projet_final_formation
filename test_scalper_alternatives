# test_scrapers_alternatives.py
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from alpha_vantage_scraper import AlphaVantageScraper
from investing_scraper import InvestingScraper
from fred_scraper import FREDScraper
import pandas as pd

def test_alpha_vantage():
    """Test Alpha Vantage"""
    print("🔍 TEST ALPHA VANTAGE")
    print("=" * 50)
    
    scraper = AlphaVantageScraper(api_key="demo")  # Clé demo gratuite
    
    # Test Forex
    forex_pairs = [("EUR", "USD"), ("XAU", "USD")]
    for from_curr, to_curr in forex_pairs:
        print(f"\n📊 Test {from_curr}/{to_curr}...")
        df = scraper.fetch_forex_data(from_curr, to_curr)
        
        if df is not None and not df.empty:
            print(f"✅ SUCCÈS - {len(df)} jours de données")
            print(df.head(3))
        else:
            print(f"❌ Échec pour {from_curr}/{to_curr}")
    
    # Test Actions
    stocks = ["AAPL", "MSFT", "GOOGL"]
    for stock in stocks:
        print(f"\n📈 Test {stock}...")
        df = scraper.fetch_stock_data(stock)
        
        if df is not None and not df.empty:
            print(f"✅ SUCCÈS - {len(df)} jours de données")
            print(df.head(3))
        else:
            print(f"❌ Échec pour {stock}")

def test_investing_com():
    """Test Investing.com"""
    print("\n🔍 TEST INVESTING.COM")
    print("=" * 50)
    
    scraper = InvestingScraper()
    symbols = ["XAUUSD", "EURUSD", "AAPL"]
    
    for symbol in symbols:
        print(f"\n📊 Test {symbol}...")
        df = scraper.fetch_data(symbol)
        
        if df is not None and not df.empty:
            print(f"✅ SUCCÈS - {len(df)} lignes")
            print(df.head(3))
        else:
            print(f"❌ Échec pour {symbol}")

def test_fred():
    """Test FRED"""
    print("\n🔍 TEST FRED (Federal Reserve)")
    print("=" * 50)
    
    scraper = FREDScraper()
    series_ids = {
        "DEXUSEU": "EUR/USD",
        "GOLDAMGBD228NLBM": "Or", 
        "SP500": "S&P 500"
    }
    
    for series_id, name in series_ids.items():
        print(f"\n📊 Test {name} ({series_id})...")
        df = scraper.fetch_economic_data(series_id)
        
        if df is not None and not df.empty:
            print(f"✅ SUCCÈS - {len(df)} observations")
            print(df.head(3))
        else:
            print(f"❌ Échec pour {series_id}")

def save_sample_data():
    """Sauvegarde des données d'exemple pour la démo"""
    print("\n💾 SAUVEGARDE DONNÉES DÉMO")
    print("=" * 50)
    
    # Utiliser Alpha Vantage (le plus fiable)
    av_scraper = AlphaVantageScraper(api_key="demo")
    
    # Récupérer données Forex
    eurusd_data = av_scraper.fetch_forex_data("EUR", "USD")
    xauusd_data = av_scraper.fetch_forex_data("XAU", "USD")
    
    if eurusd_data is not None:
        # Formater comme tes fichiers CSV existants
        eurusd_data.to_csv("data/EURUSD_scraped.csv")
        print("✅ EURUSD_scraped.csv sauvegardé")
    
    if xauusd_data is not None:
        xauusd_data.to_csv("data/XAUUSD_scraped.csv") 
        print("✅ XAUUSD_scraped.csv sauvegardé")
    
    # Si Alpha Vantage échoue, créer des données simulées
    if eurusd_data is None:
        print("🔄 Création données simulées EURUSD...")
        dates = pd.date_range(start='2024-01-01', end='2024-10-24', freq='D')
        simulated_data = pd.DataFrame({
            'open': 1.05 + np.random.randn(len(dates)) * 0.02,
            'high': 1.07 + np.random.randn(len(dates)) * 0.02,
            'low': 1.03 + np.random.randn(len(dates)) * 0.02,
            'close': 1.05 + np.random.randn(len(dates)) * 0.02
        }, index=dates)
        simulated_data.to_csv("data/EURUSD_scraped.csv")
        print("✅ EURUSD_scraped.csv (simulé) sauvegardé")

if __name__ == "__main__":
    print("🧪 TEST DES SCRAPERS ALTERNATIFS")
    print("=" * 60)
    
    # Test Alpha Vantage (meilleure option)
    test_alpha_vantage()
    
    # Test Investing.com (backup)
    test_investing_com()
    
    # Test FRED (données économiques)
    test_fred()
    
    # Sauvegarde données pour la démo
    save_sample_data()
    
    print("\n" + "=" * 60)
    print("✅ TOUS LES TESTS TERMINÉS")
    print("💾 Données sauvegardées dans data/*_scraped.csv")