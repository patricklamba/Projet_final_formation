import asyncio
import concurrent.futures
import threading
import time
from typing import List, Dict, Any
from datetime import datetime
import os
from core.strategy import BBKeltnerStrategy
from utils.file_manager import FileManager

class ConcurrentExecutor:
    """
    Ex√©cuteur concurrentiel avec visualisation en temps r√©el
    """
    
    def __init__(self, data_dir="data"):
        self.data_dir = data_dir
        self.file_activity = {}  # Suivi de l'activit√© des fichiers
        self.lock = threading.Lock()  # Pour la synchronisation
        
    def _log_file_activity(self, symbol: str, action: str, details: str = ""):
        """Journalise l'activit√© des fichiers en temps r√©el"""
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        with self.lock:
            self.file_activity[symbol] = {
                'timestamp': timestamp,
                'action': action,
                'details': details
            }
            self._display_activity()

    def _display_activity(self):
        """Affiche l'activit√© en temps r√©el dans la console"""
        os.system('cls' if os.name == 'nt' else 'clear')
        print("üîÑ ACTIVIT√â DES FICHIERS EN TEMPS R√âEL")
        print("=" * 60)
        
        for symbol, activity in self.file_activity.items():
            status_color = "üü¢" if "termin√©" in activity['action'].lower() else "üü°"
            print(f"{status_color} {symbol}: {activity['action']}")
            print(f"   ‚è∞ {activity['timestamp']} | {activity['details']}")
        print("-" * 60)

    async def run_single_strategy_async(self, symbol: str) -> Dict[str, Any]:
        """
        Ex√©cute une strat√©gie pour un symbol avec suivi visuel
        """
        try:
            # 1Ô∏è‚É£ Ouverture du fichier
            self._log_file_activity(symbol, "D√©but ouverture fichier", f"Recherche {symbol}.csv")
            
            fm = FileManager(data_dir=self.data_dir)
            df = fm.load_csv(symbol)
            
            self._log_file_activity(symbol, "Fichier ouvert avec succ√®s", f"{len(df)} lignes charg√©es")
            await asyncio.sleep(0.5)  # Pause pour visualisation

            # 2Ô∏è‚É£ Calcul des indicateurs
            self._log_file_activity(symbol, "Calcul des indicateurs", "Bollinger Bands + Keltner Channel")
            
            strategy = BBKeltnerStrategy()
            df_signals = strategy.generate_trading_signals(df)
            
            self._log_file_activity(symbol, "Indicateurs calcul√©s", f"{len(df_signals)} signaux g√©n√©r√©s")
            await asyncio.sleep(0.5)

            # 3Ô∏è‚É£ Ex√©cution des trades
            self._log_file_activity(symbol, "Ex√©cution des trades", "Money management en cours...")
            
            closed_trades = strategy.execute_trading_strategy(df_signals)
            
            self._log_file_activity(symbol, "Trades ex√©cut√©s", f"{len(closed_trades)} trades ferm√©s")
            await asyncio.sleep(0.5)

            # 4Ô∏è‚É£ G√©n√©ration du rapport
            self._log_file_activity(symbol, "G√©n√©ration rapport", "Money management...")
            
            mm_report = strategy.generate_money_management_report(symbol)
            
            # 5Ô∏è‚É£ Sauvegarde des r√©sultats
            output_path = f"{self.data_dir}/results_{symbol}.csv"
            df_signals.to_csv(output_path)
            
            report_path = f"{self.data_dir}/mm_report_{symbol}_{datetime.now().strftime('%Y%m%d_%H%M')}.json"
            import json
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(mm_report, f, indent=2, default=str)

            self._log_file_activity(symbol, "‚úÖ Analyse termin√©e", 
                                  f"Profit: {mm_report['money_management']['net_profit']:+.2f}‚Ç¨ | "
                                  f"Fichiers: {os.path.basename(output_path)}, {os.path.basename(report_path)}")

            return mm_report

        except Exception as e:
            self._log_file_activity(symbol, "‚ùå Erreur", str(e))
            return {"error": str(e), "symbol": symbol}

    async def run_multiple_strategies_async(self, symbols: List[str]) -> List[Dict[str, Any]]:
        """
        Ex√©cute plusieurs strat√©gies en parall√®le avec visualisation
        """
        print("üöÄ LANCEMENT CONCURRENT DES STRAT√âGIES")
        print(f"üìä Symboles: {', '.join(symbols)}")
        print("=" * 60)
        
        # Initialisation du suivi
        for symbol in symbols:
            self._log_file_activity(symbol, "‚è≥ En attente...", "Pr√™t √† d√©marrer")
        
        await asyncio.sleep(2)  # Pause pour voir l'√©tat initial
        
        # Ex√©cution concurrente
        tasks = [self.run_single_strategy_async(symbol) for symbol in symbols]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        print("\n" + "=" * 60)
        print("‚úÖ TOUTES LES STRAT√âGIES TERMIN√âES")
        
        return results

    def run_multiple_strategies_threaded(self, symbols: List[str]) -> List[Dict[str, Any]]:
        """
        Version thread√©e pour comparaison
        """
        with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:
            futures = {executor.submit(self._run_single_strategy_threaded, symbol): symbol for symbol in symbols}
            
            results = []
            for future in concurrent.futures.as_completed(futures):
                symbol = futures[future]
                try:
                    result = future.result()
                    results.append(result)
                except Exception as e:
                    results.append({"error": str(e), "symbol": symbol})
            
            return results

    def _run_single_strategy_threaded(self, symbol: str) -> Dict[str, Any]:
        """
        Version adapt√©e pour le threading
        """
        # Pour le threading, on utilise asyncio dans un thread s√©par√©
        return asyncio.run(self.run_single_strategy_async(symbol))